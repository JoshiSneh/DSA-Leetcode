/* Method-1 */

T.C = O(2^M*N);
S.C = O(N+M);

/* Using Recursion */


class Solution {
private:
    int calPath(int i,int j,vector<vector<int>>&grid){
        
        /* This case cannot be come downwards i.e below the line 16 reason see wrong answer T.C */
        if(i>=0 && j>=0 && grid[i][j] == 1){
            return 0;
        }
        
        if(i == 0 && j == 0){
            return 1;
        }
        
        if(i < 0 || j < 0 ){
            return 0;
        }
        
        
        int upDir = calPath(i-1,j,grid);
        int leftDir = calPath(i,j-1,grid);
        
        return upDir+leftDir;
    }
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
         
        return calPath(m-1,n-1,grid);
    }
};



/* Method-2 */

T.C = O(M*N);
S.C = O(N+M) + O(N*M);

/* Using Memoization */


class Solution {
private:
    int calPath(int i,int j,vector<vector<int>>&grid,vector<vector<int>>&dp){
        
        /* This case cannot be come downwards i.e below the line 16 reason see wrong answer T.C */
        if(i>=0 && j>=0 && grid[i][j] == 1){
            return 0;
        }
        
        if(i == 0 && j == 0){
            return 1;
        }
        
        if(i < 0 || j < 0 ){
            return 0;
        }
        
        if(dp[i][j] != -1) return dp[i][j];
        
        int upDir = calPath(i-1,j,grid,dp);
        int leftDir = calPath(i,j-1,grid,dp);
        
        return dp[i][j] = upDir+leftDir;
    }
public:
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        
        vector<vector<int>>dp(m,vector<int>(n,-1));
        
        return calPath(m-1,n-1,grid,dp);
    }
};