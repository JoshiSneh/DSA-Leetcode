/* Method-1 */

T.C = O(2^N * 2^M);
S.C = O(N+M);

/* Using Recursion */


class Solution {
private:
    int lcs(int i1, int i2, string s1, string s2){
        if(i1<0 || i2<0){
            return 0;
        }
        
        int match = 0;
        int notMatch = 0;
        
        if(s1[i1] == s2[i2]){
            match = 1+lcs(i1-1,i2-1,s1,s2);
        }else{
            notMatch = 0+max(lcs(i1-1,i2,s1,s2),lcs(i1,i2-1,s1,s2));
        }
        
        return match+notMatch;
    }
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n1 = text1.size();
        int n2 = text2.size();
        
        return lcs(n1-1,n2-1,text1,text2);
    }
};

/* Method-2 */

T.C = O(N*M);
S.C = O(N*M)+O(N+M);

/* Using Memoization */


class Solution {
private:
    int lcs(int i1, int i2, string &s1, string &s2, vector<vector<int>>&dp){
        if(i1<0 || i2<0){
            return 0;
        }
        
        int match = 0;
        int notMatch = 0;
        
        if(dp[i1][i2] != -1){
            return dp[i1][i2];
        }
        
        if(s1[i1] == s2[i2]){
            match = 1+lcs(i1-1,i2-1,s1,s2,dp);
        }else{
            notMatch = 0+max(lcs(i1-1,i2,s1,s2,dp),lcs(i1,i2-1,s1,s2,dp));
        }
        
        return dp[i1][i2]=match+notMatch;
    }
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n1 = text1.size();
        int n2 = text2.size();
        
        vector<vector<int>>dp(n1+1,vector<int>(n2+1,-1));
        return lcs(n1-1,n2-1,text1,text2,dp);
    }
};

/* Method-3 */

T.C = O(N*M);
S.C = O(N*M+O(N+M);

/* Using Tabulation */

public:
    int longestCommonSubsequence(string text1, string text2) {
        int n1 = text1.size();
        int n2 = text2.size();
        
        vector<vector<int>>dp(n1+1,vector<int>(n2+1,-1));
        
        /* We are doing the shifting of the index */
        
        for(int i=0;i<=n1;++i){
            dp[i][0] = 0;
        }
        
        for(int i=0;i<=n2;++i){
            dp[0][i] = 0;
        }
        
        for(int i=1;i<=n1;++i){
            for(int j=1;j<=n2;++j){
                 int match = 0;
                 int notMatch = 0;
                 if(text1[i-1] == text2[j-1]){
                    match = 1+dp[i-1][j-1];
                 }else{
                    notMatch = 0+max(dp[i-1][j],dp[i][j-1]);
                 }

                dp[i][j]=match+notMatch;
            }
        }
                return dp[n1][n2];
    }
};