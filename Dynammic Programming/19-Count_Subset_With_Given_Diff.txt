/* Method-1 */

T.C = O(N*Target);
S.C = O(N)+O(N*Target);

/* Using the Memoization */

int findWaysUtil(int ind, int target, vector<int>& arr, vector<vector<int>> &dp){
    if(ind == 0){
        if(target == 0 && arr[0] == 0){
            return 2;
        }
        
        if(target == 0 || target == arr[0]){
            return 1;
        }
        
        return 0;
    }
    
    if(dp[ind][target]!=-1)
        return dp[ind][target];
        
    int notTaken = findWaysUtil(ind-1,target,arr,dp);
    
    int taken = 0;
    if(arr[ind]<=target)
        taken = findWaysUtil(ind-1,target-arr[ind],arr,dp);
        
    return dp[ind][target]= (notTaken + taken)%mod;
}

int countPartitions(int n, int d, vector<int> &arr) {
    int totalSum = 0;
//     cout<<"Sneh";
    for(int i=0;i<n;++i){
        totalSum+=arr[i];
    }

    int k = (totalSum-d)/2;

    /* Edge Cases */
    if(totalSum-d < 0 || (totalSum-d)%2){
        return 0;
    }
   
    vector<vector<int>> dp(n,vector<int>(k+1,-1));
    return findWaysUtil(n-1,k,arr,dp);
}