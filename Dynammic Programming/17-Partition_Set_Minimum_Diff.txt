/* Method-1 */

T.C = O(N*target);
S.C = O(N*target);

/* Using the Tabulation */


/* This approach will not work for the neagitve number */

#include<bits/stdc++.h>
using namespace std;

int minSubsetSumDifference(vector<int>& nums, int n)
{
        
        int totalSum = accumulate(nums.begin(),nums.end(),0);
        int k = totalSum;
        
        vector<vector<int>>dp(n,vector<int>(k+1,0));
        
        for(int i=0;i<n;++i){
            dp[i][0]=true;
        }
        
        if(nums[0] <= k){
            dp[0][nums[0]] = true;
        }
        
        for(int i=1;i<n;++i){
            for(int target=1;target<=k;++target){
                int notPick = dp[i-1][target];
                int pick = false;

                if(target>=nums[i]){
                    pick = dp[i-1][target-nums[i]];
                }

                dp[i][target] = pick||notPick;
            }
        }
        
//         for(int i=0;i<n;++i){
//             for(int j=0;j<k+1;++j){
//                 cout<<dp[i][j]<<" ";
//             }
//             cout<<endl;
//         }
        
        int minDiff = INT_MAX;
        
        for(int sum=0;sum<=k;++sum){
            int temp = k-sum;
            if(dp[n-1][sum] == true){
                minDiff = min(minDiff,abs(temp-sum));
            }
        }
        
        return minDiff;
}

