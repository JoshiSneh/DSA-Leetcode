/* Method-1 */

T.C = O(2^N);
S.C = O(N);

/* Using the Recursion */

class Solution {
private:
    int calPathSum(vector<vector<int>>&triangle,int i,int j,int n){
        if(i == n-1){
            return triangle[i][j];
        }
        
        
        int downDir = triangle[i][j]+calPathSum(triangle,i+1,j,n);
        int diaDir = triangle[i][j]+calPathSum(triangle,i+1,j+1,n);
        
        return min(downDir,diaDir);
    }
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n =triangle.size();
        
        return calPathSum(triangle,0,0,n);
    }
};



/* Method-2 */

T.C = O(N*N);
S.C = O(N) + O(N*N);

/* Using the Memoization */

class Solution {
private:
    int calPathSum(vector<vector<int>>&triangle,int i,int j,int n,vector<vector<int>>&dp){
        if(i == n-1){
            return triangle[i][j];
        }
        
        if(dp[i][j] != -1) return dp[i][j];
        
        int downDir = triangle[i][j]+calPathSum(triangle,i+1,j,n,dp);
        int diaDir = triangle[i][j]+calPathSum(triangle,i+1,j+1,n,dp);
        
        return dp[i][j] = min(downDir,diaDir);
    }
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n =triangle.size();
        
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        return calPathSum(triangle,0,0,n,dp);
    }
};


/* Method-3 */

T.C = O(N*N);
S.C = O(N*N);

/* Using the Tabulation*/

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n =triangle.size();
        
        vector<vector<int>>dp(n,vector<int>(n+1,0));
        
        for(int i=0;i<n;++i){
           dp[n-1][i] = triangle[n-1][i];     
        }
        
        
        for(int i=n-2;i>=0;--i){
            for(int j=i;j>=0;--j){
                int down = triangle[i][j]+dp[i+1][j];
                int dia = triangle[i][j]+dp[i+1][j+1];
                
                dp[i][j] = min(down,dia);
            }
        }
        
        return dp[0][0];
    }
};