/* Method-1 */

Using the Space Optimization

class Solution {
private:
    int maximumMoneyRobbed(vector<int>&nums){
        int n = nums.size();
        int prev = nums[0];
        int prev2 = 0;
        
        int cur;
        
        for(int i=1;i<n;++i){
            int pick = nums[i];
            if(i>1){
                pick+=prev2;
            }
            
            int nonPick = 0+prev;
            
            cur = max(pick,nonPick);
            prev2 = prev;
            prev = cur;
        }
        
        return prev;
    };
public:
    int rob(vector<int>& nums) {
        int n = nums.size();
        
        if(n == 1){
            return nums[0];
        }
        
        vector<int>res1,res2;
        
        for(int i=0;i<n;++i){
           if(i != 0){
               res1.push_back(nums[i]);
           }
            
           if(i != n-1){
               res2.push_back(nums[i]);
           }
        }
        
        return max(maximumMoneyRobbed(res1),maximumMoneyRobbed(res2));
        
    }
};