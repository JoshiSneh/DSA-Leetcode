/* Method-1 */

T.C = O(2^N*M) ;
S.C = O(N+M);

/* Using the Recursion */

class Solution {
private:
    int minPathSum(int i,int j, vector<vector<int>>&grid){
        if(i == 0 && j == 0){
            return grid[0][0];
        }
        
/* Remember this step because when ever the index goes out of bound that means we donot have to consider this and ignore this path */
        if(i < 0 || j < 0){
            return 500;
        }
        
        
        int upDir = grid[i][j]+minPathSum(i-1,j,grid);
        int leftDir = grid[i][j]+minPathSum(i,j-1,grid);
        
        return min(upDir,leftDir);
        
    };
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        
        return minPathSum(m-1,n-1,grid);
    }
};


/* Method-2 */

T.C = O(N*M) ;
S.C = O(N+M)+O(N*M);

/* Using the Memoization*/

class Solution {
private:
    int minPathSum(int i,int j, vector<vector<int>>&grid, vector<vector<int>>&dp){
        if(i == 0 && j == 0){
            return grid[0][0];
        }
        
        /* Remember this step because when ever the index goes out of bound that means we donot have to consider this and ignore this path */
        
        if(i < 0 || j < 0){
            return 500;
        }
        
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
        int upDir = grid[i][j]+minPathSum(i-1,j,grid,dp);
        int leftDir = grid[i][j]+minPathSum(i,j-1,grid,dp);
        
        return dp[i][j] = min(upDir,leftDir);
        
    };
public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        
        vector<vector<int>>dp(m,vector<int>(n,-1));
        
        return minPathSum(m-1,n-1,grid,dp);
    }
};


/* Method-3 */

T.C = O(N*M) ;
S.C = O(N*M);

/* Using the Tabulation */

class Solution {

public:
    int minPathSum(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();
        
        vector<vector<int>>dp(m,vector<int>(n,-1));
        
        dp[0][0] = grid[0][0];
        
        for(int i=0;i<m;++i){
            for(int j=0;j<n;++j){
                if(i == 0 && j == 0){
                    dp[i][j] = grid[0][0];
                }else{
                    int up = grid[i][j];
                    int left = grid[i][j];
                    
                    if(i>0){
                        up+=dp[i-1][j];
                    }else{
                        up+=500; /* Ignoring this path */
                    }
                    
                    if(j>0){
                        left+=dp[i][j-1];    
                    }else{
                        left+=500;
                    }
                    
                    dp[i][j] = min(left,up);
                }
            }
        }
        
        return dp[m-1][n-1];
    }
};