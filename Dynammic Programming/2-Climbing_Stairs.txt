/* Method-1 */
T.C = O(N);
S.C = O(N)+O(N);

/* Using the Memoization */

class Solution {
private:
    int dp[46]={0};
public:
    int climbStairs(int n) {
        if(n<=1){
             return 1;
        }
        
        if(dp[n] != 0){
            return dp[n];
        }
        
        int left = climbStairs(n-1);
        int right = climbStairs(n-2);
        
        dp[n]=left+right;
        return dp[n];
    }
};

/* Method-2 */
T.C = O(N)
S.C = O(N)

/* Using the Tabulation */

class Solution {
public:
    int climbStairs(int n) {
        vector<int>dp(n+1,-1);
        
        dp[0]=1;
        dp[1]=1;
        
        for(int i=2;i<=n;++i){
          dp[i]=dp[i-1]+dp[i-2];    
        }
        
        return dp[n];
        
    }
};