/* Method-1 */

T.C = O(N^N*N);
S.C = O(N);


/* Using Recursion */


class Solution {
private:
    int calMinSum(vector<vector<int>>&matrix, int i,int j,int n){
        
        if(j<0 || j>=n){
            return 1e9;
        }
        
        if(i == 0){
            return matrix[i][j];
        }  
        
        int minSum = INT_MAX;
        
        for(int k=0;k<n;++k){
            if(k != j){
                minSum = min(minSum,matrix[i][j]+calMinSum(matrix,i-1,k,n));
            }
        }
        
        return minSum;
    };
public:
    int minFallingPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        
        int minSum = INT_MAX;
        
        for(int i=0;i<n;++i){
           minSum = min(minSum,calMinSum(grid,n-1,i,n));    
        }
        
        return minSum;
    }
};


/* Method-2 */

T.C = O(N*N);
S.C = O(N) + O(N*N);


/* Using Memoization */


class Solution {
private:
    int calMinSum(vector<vector<int>>&matrix, int i,int j,int n,vector<vector<int>>&dp){
        
        if(j<0 || j>=n){
            return 1e9;
        }
        
        if(i == 0){
            return matrix[i][j];
        }  
        
        if(dp[i][j] != -1){
            return dp[i][j];
            
        }
        
        int minSum = INT_MAX;
        
        for(int k=0;k<n;++k){
            if(k != j){
                minSum = min(minSum,matrix[i][j]+calMinSum(matrix,i-1,k,n,dp));
            }
        }
        
        return dp[i][j] = minSum;
    };
public:
    int minFallingPathSum(vector<vector<int>>& grid) {
        int n = grid.size();
        
        int minSum = INT_MAX;
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        
        for(int i=0;i<n;++i){
           minSum = min(minSum,calMinSum(grid,n-1,i,n,dp));    
        }
        
        return minSum;
    }
};