/* Method-1 */
T.C = O(N*Target);
S.C = O(N);

/* Using the Recursion */

class Solution {
private:
    int countWays(int i,vector<int>&nums,int target){
        if(i == 0){
            if(target == 0 && nums[0] == 0){
                return 2;
            }
            
            if(target == 0 || target == nums[0]){
                return 1;
            }
            
            return 0;
        }
        
        
        int notPick = countWays(i-1,nums,target);
        int pick = 0;
        
        if(target >= nums[i]){
            pick = countWays(i-1,nums,target-nums[i]);
        }
        
        return dp[{i,target}]=pick+notPick;
    }; 
    
public: 
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int totalSum = 0;
        
        for(int i=0;i<n;++i){
          totalSum+=nums[i];    
        }
        
        int k = (totalSum-target)/2;
        
    
        if((totalSum+target)<0||(totalSum+target)&1){
            return 0;
        }
        
        
        return countWays(n-1,nums,k);
        
    }   
};

/* Method-2 */
T.C = O(N*Target);
S.C = O(N) + O(N*Target);

/* Using the Tabulation */

class Solution {
private:
    int countWays(int i,vector<int>&nums,int target,map<pair<int,int>,int>&dp){
        
        if(i == 0){
            if(target == 0 && nums[0] == 0){
                return 2;
            }
            
            if(target == 0 || target == nums[0]){
                return 1;
            }
            
            return 0;
        }
        
        if(dp[{i,target}] != 0){
            return dp[{i,target}];
        }
        
        int notPick = countWays(i-1,nums,target,dp);
        int pick = 0;
        
        if(target >= nums[i]){
            pick = countWays(i-1,nums,target-nums[i],dp);
        }
        
        return dp[{i,target}]=pick+notPick;
        
    };  
        
public: 
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size();
        int totalSum = 0;
        
        for(int i=0;i<n;++i){
          totalSum+=nums[i];    
        }
        
        int k = (totalSum-target)/2;
        
        
        if((totalSum+target)<0||(totalSum+target)&1){
            return 0;
        }
        
        map<pair<int,int>,int>dp;
        
        return countWays(n-1,nums,k,dp);
        
    }   
};
