Method-1----------

/* Using the Memoization */

T.C = O(N);
S.C = O(N)+O(N);

class Solution {
private:
    int func(int n,vector<int>&dp){
        if(n<=1) return n;
        
        if(dp[n] != -1){
            return dp[n];
        }
        
        dp[n]=func(n-1,dp)+func(n-2,dp);
        return dp[n];
    }
    
public:
    int fib(int n) {
        vector<int>dp(n+1,-1);
        
        return func(n,dp);
    }
};

Method-2------------

/* Using the Tabulation */

class Solution {
public:
    int fib(int n) {
        int dp[n+1];
        
        if(n == 0){
            return 0;
        }
        
        dp[0]=0;
        dp[1]=1;
        
        for(int i=2;i<=n;++i){
            dp[i]=dp[i-1]+dp[i-2];
        }
        
        return dp[n];
    }
};


Method-3-------------

/* Using the Space Optimization */

class Solution {
public:
    int fib(int n) {
        int a = 0;
        int b = 1;
        
        /* Edge Case */
        if(n == 0){
            return 0;
        }
        
        for(int i=2;i<=n;++i){
            int c=a+b;
            a=b;
            b=c;
        }
        
        return b;
    }
};