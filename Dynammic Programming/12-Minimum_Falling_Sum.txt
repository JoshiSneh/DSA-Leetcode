/* Method-1 */

T.C = O(3^N);
S.C = O(N);

/* Using the Recursion */

class Solution {
private:
    int calMinSum(vector<vector<int>>&matrix, int i,int j,int n){
        
        if(j<0 || j>=n){
            return 200;
        }
        
        if(i == 0){
            return matrix[i][j];
        }  
        
        int upDir = matrix[i][j]+calMinSum(matrix,i-1,j,n);
        int leftDir = matrix[i][j]+calMinSum(matrix,i-1,j-1,n);
        int rightDir = matrix[i][j]+calMinSum(matrix,i-1,j+1,n);
        
        return min(upDir,min(leftDir,rightDir));
    };
    
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        
        int minSum = INT_MAX;
        
        for(int i=0;i<n;++i){
           minSum = min(minSum,calMinSum(matrix,n-1,i,n));    
        }
        
        return minSum;
    }
};


/* Method-2 */

T.C = O(N*N);
S.C = O(N*N) + O(N);

/* Using the Memoization */

class Solution {
private:
    int calMinSum(vector<vector<int>>&matrix, int i,int j,int n,vector<vector<int>>&dp){
        
        if(j<0 || j>=n){
            return 1e9;
        }
        
        if(i == 0){
            return matrix[i][j];
        }  
        
        if(dp[i][j] != -1){
           return dp[i][j];    
        }
        
        int upDir = matrix[i][j]+calMinSum(matrix,i-1,j,n,dp);
        int leftDir = matrix[i][j]+calMinSum(matrix,i-1,j-1,n,dp);
        int rightDir = matrix[i][j]+calMinSum(matrix,i-1,j+1,n,dp);
        
        return dp[i][j] = min(upDir,min(leftDir,rightDir));
    };
    
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        
        int minSum = INT_MAX;
        
        vector<vector<int>>dp(n,vector<int>(n+1,-1));
        
        for(int i=0;i<n;++i){
           cout<<minSum<<" ";
           minSum = min(minSum,calMinSum(matrix,n-1,i,n,dp));    
        }
        
        return minSum;
    }
};


/* Method-3 */

T.C = O(N*N);
S.C = O(N*N);

/* Using the Tabulation */

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        
        vector<vector<int>>dp(n,vector<int>(n,0));
        
        for(int i=0;i<n;++i){
            dp[0][i] = matrix[0][i]; 
        }
        
        for(int i=1;i<n;++i){
            for(int j=0;j<n;++j){
                int upDir = matrix[i][j]+dp[i-1][j];
                
                int leftDir;
                if(j>0)leftDir = matrix[i][j]+dp[i-1][j-1];
                else leftDir+=1e9;
                
                int rightDir;
                if(j<=n-2)rightDir = matrix[i][j]+dp[i-1][j+1];
                else rightDir+=1e9;
                
                dp[i][j] =  min(upDir,min(leftDir,rightDir));
            }
        }
        
        int minSum = INT_MAX;
        
        for(int i=0;i<n;++i){
           minSum = min(minSum,dp[n-1][i]);    
        }
        
        return minSum;
    }
};