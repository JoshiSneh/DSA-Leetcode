/* Method-1 */

Using Memoization


class Solution {
private:
    int calCost(vector<int>&cost,int i, vector<int>&dp){
        if(i == 0 || i== 1){
            return 0;
        }
        
        if(dp[i] != -1){
            return dp[i];
            
        }
        
        int left = calCost(cost,i-1,dp)+cost[i-1];
        int right = INT_MAX;
        
        
        if(i>1){
            right = calCost(cost,i-2,dp)+cost[i-2];
        }
        
        dp[i] = min(left,right);
        
        return dp[i];
    };
    
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        
        vector<int>dp(n+1,-1);
        
        return calCost(cost,n,dp);
        
    }
};