Question-11


210. Course Schedule II ------------ Leetcode


class Solution {
private:
    bool dfs(int node,vector<int>&vis,vector<int>&dfsVis,vector<int>adj[],stack<int>&s){
        vis[node] = 1;
        dfsVis[node] = 1;
        
        for(auto i:adj[node]){
            if(vis[i] == 0){
                if(dfs(i,vis,dfsVis,adj,s) == true){
                    return true;
                }
            }else if(vis[i] == 1 && dfsVis[i] == 1){
                return true;
            }
        }
        dfsVis[node] = 0; /* Check a cycle for directed graph */
        s.push(node);
        
        return false;
    };
public:
    vector<int> findOrder(int n, vector<vector<int>>& pre) {
        vector<int>adj[n];
        
        for(auto i:pre){
            adj[i[1]].push_back(i[0]);
        }
        
        vector<int>vis(n,0);
        vector<int>dfsVis(n,0);
        
        /* Topo Sort usinf DFS */
        stack<int>s;
        
        vector<int>res;
        
        for(int i=0;i<n;++i){
            if(vis[i] == 0){
               if(dfs(i,vis,dfsVis,adj,s) == true){ /* If a cycle exist then return empty array */
                   return res;
               }        
            }
        }
        
        while(!s.empty()){
            res.push_back(s.top());
            s.pop();
        }
        
        return res;
    }
};