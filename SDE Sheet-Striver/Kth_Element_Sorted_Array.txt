/* Method-1* /
T.C = O(K);
S.C = O(1);

int ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int m, int n, int k) {

    
    int i=0;
    int j=0;
    
    while(i<m && j<n){
        if(i+j == k-1){
            return min(row1[i],row2[j]);
        }
        if(row1[i]<=row2[j]){
            i++;
        }else{
            j++;
        }
    }
    
    while(i<m){
        if(i+j == k-1){
            return row1[i];
        }
        i++;
    }
    
    while(j<n){
        if(i+j == k-1){
            return row2[j];
        }
        j++;
    }
    
    return -1;
    
}



/* Method-2*/
T.C = O(LOG(MIN(N,M)))
S.C = O(1)

int ninjaAndLadoos(vector<int> &row1, vector<int> &row2, int m, int n, int k) {
    
    if(n>m){
        return ninjaAndLadoos(row2,row1,n,m,k);
    }
    
    int low = max(0,k-m);
    int high = min(k,n);
    
    while(low<=high){
       int cut1 = (low+high)/2;
       int cut2 = k-cut1;
       int l1 = cut1==0 ? -2147483647-1:row1[cut1-1];
       int l2 = cut2==0 ? -2147483647-1:row2[cut2-1];
       int r1 = cut1==n ? 2147483647:row1[cut1];
       int r2 = cut2==m ? 2147483647:row2[cut2];
        
       if(l1<=r2 && l2<=r1){
           return max(l1,l2);
       }
       if(l1>r2){
           high=cut1-1;
       }else if(l2>r1){
           low=cut1+1;
       }
    }
    
    return -1;
}