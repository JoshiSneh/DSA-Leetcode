/* Method-1 */
T.C = O(N2)
S.C = O(1)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        
        vector<int>res;
        
        for(int i=0;i<n-1;++i){
            for(int j=i+1;j<n;++j){
                if(nums[i] + nums[j] == target){
                    res.push_back(i);
                    res.push_back(j);
                    break;
                }
            }
        }
        
        return res;
    }
};

/* Method-2 */
T.C = O(N)
S.C = O(N)

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        int n = nums.size();
        
        /*Num, Index*/
        unordered_map<int,int>m;
        vector<int>res;
        
        for(int i=0;i<n;++i){
           int b = target-nums[i];
           
           if(m.find(b) != m.end()){
               res.push_back(m[b]);
               res.push_back(i);
               break;
           }
           m[nums[i]]=i;
        }
        
        return res;
    }
};