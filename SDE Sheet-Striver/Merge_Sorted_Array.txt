/* Method-1 */

T.C = O(n)+o(n)+o(nlogn)+o(n);

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
    
        vector<int>res;
        
        for(int i=0;i<m;++i){
            res.push_back(nums1[i]);
        }
        
        for(int j=0;j<n;++j){
            res.push_back(nums2[j]);
        }
        
        sort(res.begin(),res.end());
        
        for(int i=0;i<res.size();++i){
          nums1[i] = res[i];    
        }
        
    }
};


/* Method-2 */

TC = O(M+N)

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        int i = m-1; /* This will point to m-1 of the nums1 */
        int j = n-1; /* This will point to n-1 of the nums2 */
        int k = m+n-1; /* This will point to the last element of the nums1 */
        
        while(i>=0 && j>=0){
        /* If any of the last is greater, than put that element to the last of nums1 */
            if(nums1[i] >= nums2[j]){
                nums1[k] = nums1[i];
                i--;
                k--;
            }else{
                nums1[k] = nums2[j];
                j--;
                k--;
            }
        }
        /* The below loop are for putting the remaining element in nums1 
           But the i while loop is not required since if j got finished first than the remaining ith element will already be sorted
        */
        
        while(i>=0){
            nums1[k] = nums1[i];
            i--;
            k--;
        }
        
        while(j>=0){
            nums1[k] = nums2[j];
            j--;
            k--;
        }
        
    }
};