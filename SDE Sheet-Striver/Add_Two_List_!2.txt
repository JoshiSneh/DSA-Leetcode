/* Method-1 */
T.C =  O(4N)
SC. = O(N);

class Solution {
private:
    ListNode* reverseList(ListNode* head){
        ListNode* pre = 0;
        ListNode* cur = head;
        ListNode* nextNode = head;
        
        while(nextNode != NULL){
            nextNode = cur->next;
            cur->next = pre;
            pre = cur;
            cur = nextNode;
        }
          
        return pre;
    }
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* newL1 = reverseList(l1);
        ListNode* newL2 = reverseList(l2);
        
        ListNode* dummy = new ListNode(0);
        ListNode* temp = dummy;
        int carry = 0;
     
        while(newL1 != NULL || newL2 != NULL || carry != 0){
            int sum = 0;
            if(newL1 != NULL){
                sum+=newL1->val;
                newL1 = newL1->next;
            }
            
            if(newL2 != NULL){
                sum+=newL2->val;
                newL2=newL2->next;
            }
            
            sum+=carry;
            carry = sum/10;
            ListNode* node = new ListNode(sum%10);
            temp->next = node;
            temp = node;
        }
        
        return reverseList(dummy->next);
    }
};

/* Method-2 */
T.C = O(max(s1,s2)) + O(L1) + O(L2)
S.C = O(L1)+O(L2)+O(N);

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int>s1;
        stack<int>s2;
        
        while(l1 != NULL){
           s1.push(l1->val);
           l1=l1->next;
        }
        
        while(l2 != NULL){
           s2.push(l2->val);
           l2=l2->next;
        }
        
        ListNode* pre = 0;
        int carry = 0;
        
        while(!s1.empty() || !s2.empty() || carry != 0){
            int sum = 0;
            if(!s1.empty()){
                sum+=s1.top();
                s1.pop();
            }
            
            if(!s2.empty()){
                sum+=s2.top();
                s2.pop();
            }
            
            sum+=carry;
            carry = sum/10;
            ListNode* node = new ListNode(sum%10);
            node->next = pre;
            pre=node;
        }
        
        return pre;
    }
};