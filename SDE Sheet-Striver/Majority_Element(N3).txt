/* Methdo-1 */
T.C = O(N)
S.C = O(N)

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        unordered_map<int,int>m;
        
        vector<int>res;
        int n = nums.size();
        for(auto i:nums){
          m[i]++;    
        }
        
        for(auto i:m){
            if(i.second > floor(n/2)){
                res.push_back(i.first);
            }
        }
        
        return res;
    }
};

/* Method-2 */
T.C = O(N)+O(N)
S.C = O(1)

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        int n = nums.size();
        int num1 = -1;
        int num2 = -1;
        
        int count1 = 0;
        int count2 = 0;
        
        for(int i=0;i<n;++i){
            if(nums[i] == num1){ count1++;}
            else if(nums[i] == num2){count2++;}
            else if(count1 == 0){num1 = nums[i];count1=1;}
            else if(count2 == 0){num2 = nums[i];count2=1;}
            else{count1--;count2--;}
        }
        
        count1=count2=0;
        
        for(int i=0;i<n;++i){
            if(nums[i]==num1){count1++;}
            else if(nums[i]==num2){count2++;}
        }
        
        vector<int>res;
        
        if(count1 > floor(n/3)){
            res.push_back(num1);
        }
        if(count2 > floor(n/3)){
            res.push_back(num2);
        }
        
        return res;
    }
};