/* Method-1 */

T.C - O(N2)

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row = matrix.size();
        int col = matrix[0].size();
        
        for(int i=0;i<row;++i){
            for(int j=0;j<col;++j){
                if(matrix[i][j] == target) return true;
            }
        }
        
        return false;
    }
};

/* Method-2 */

T.C - O(mlogn) - m for no. of rows and logn for binary search

class Solution {
private:
    bool binarySearch(vector<int>&mat,int low,int high, int target){
        
        while(low<=high){
            int mid = (low+high)/2;
            
            if(mat[mid] == target){
                return true;
            }else if(mat[mid] < target){
                low = mid+1;
            }else{
                high = mid-1;
            }
        }
        
        return false;
    }
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row = matrix.size();
        int col = matrix[0].size();
        
        for(int i=0;i<row;++i){
            if(binarySearch(matrix[i],0,col-1,target) == true){
                return true;
            }
        }
        
        return false;
    }
};

/* Method-3 */

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int row = matrix.size();
        int col = matrix[0].size();
        
        int i = 0;
        int j = col-1;
        
        while(i<row && j>=0){
            if(matrix[i][j] == target){
                return true;
            }else if(matrix[i][j] < target){
                i++;
            }else{
                j--;
            }
        }
        
        /* 
         When this false will work?
         if we got the outside the index bound it means that we haven't found the target and than this false will work. 
        */
        return false;
    }
};