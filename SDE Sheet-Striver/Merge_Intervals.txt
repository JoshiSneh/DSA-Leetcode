/* Method-1 */
Using forEach Loop

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>>res;
        int n = intervals.size();
        
        if(n == 0){
            return res;
        }
        
        sort(intervals.begin(),intervals.end());
        
        vector<int>temp = intervals[0]; /* Assigning the first 0th vector to the temp */
        
        
        for(auto i:intervals){
      /* 
         How will the merge happen?
         if the current's start is lesser than the previous end the n we can say that it will be merged
      */
           if(i[0] <= temp[1]){
               temp[1] = max(i[1],temp[1]);
           }else{
      /*
        Here the merge will not happen so, we have to push the temp into the resultant vector and assign the temp to current ith vector  
      */
               res.push_back(temp);
               temp = i;
           }
        }
     /* For pushing the last resultant temp */   
        res.push_back(temp);
        return res;
    }
};

/* Method-2 */
Using normal for loop

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>>res;
        int n = intervals.size();
        
        if(n == 0){
            return res;
        }
        
        sort(intervals.begin(),intervals.end());
        vector<int>temp = intervals[0];
        
        for(int i=0;i<n;++i){
           if(intervals[i][0] <= temp[1]){
               temp[1] = max(temp[1],intervals[i][1]);
           }else{
               res.push_back(temp);
               temp = intervals[i];
           }
        }
        
        res.push_back(temp);
        
        return res;
    }
};